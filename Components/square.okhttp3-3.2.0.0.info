{"Name":"OkHttp v3","Id":2645,"Alias":"square.okhttp3","Description":"# OkHttp Details\n\n\u003e An HTTP+HTTP/2 client for Android and Java applications\n\nHTTP is the way modern applications network. It’s how we exchange data \u0026amp;\nmedia. Doing HTTP efficiently makes your stuff load faster and saves\nbandwidth.\n\nOkHttp is an HTTP client that’s efficient by default:\n\n  * HTTP/2 support allows all requests to the same host to share a socket.\n  * Connection pooling reduces request latency (if HTTP/2 isn’t available).\n  * Transparent GZIP shrinks download sizes.\n  * Response caching avoids the network completely for repeat requests.\n\nOkHttp perseveres when the network is troublesome: it will silently recover\nfrom common connection problems. If your service has multiple IP addresses\nOkHttp will attempt alternate addresses if the first connect fails. This is\nnecessary for IPv4+IPv6 and for services hosted in redundant data centers.\nOkHttp initiates new connections with modern TLS features (SNI, ALPN), and\nfalls back to TLS 1.0 if the handshake fails.\n\nUsing OkHttp is easy. Its 3.0 API is designed with fluent builders and\nimmutability. It supports synchronous blocking calls, async calls with\ncallbacks and async calls using `Task` with `await`.\n\n## Get a URL\n\nThis code downloads a URL and print its contents as a string:\n\n    // Create a request\n    OkHttpClient client = new OkHttpClient();\n    Request request = new Request.Builder()\n        .Url(url)\n        .Build();\n    \n    // Synchronous blocking call\n    Response response = client.NewCall(request).Execute();\n    string body = response.Body().String();\n\n## Post to a Server\n\nThis code posts data to a service:\n\n    // Create a request\n    OkHttpClient client = new OkHttpClient();\n    RequestBody body = RequestBody.Create(\n        MediaType.parse(\"application/json; charset=utf-8\"), \n        \"{ \u0027name\u0027: \u0027Xamarin\u0027, \u0027rating\u0027: 5 }\");\n    Request request = new Request.Builder()\n        .Url(url)\n        .Post(body)\n        .Build();\n        \n    // Synchronous blocking call\n    Response response = client.NewCall(request).Execute();\n    string body = response.Body().String();\n\n## Asynchronous Requests\n\nThis code executes a request on a background thread using a callback mechanism:\n\n    OkHttpClient client = ...;\n    Request request = ...;\n    \n    // Asynchronous callback\n    client.NewCall(request).Enqueue(\n        (call, response) =\u003e {\n            // Response came back\n            string body = response.Body().String();\n        }, (call, exception) =\u003e {\n            // There was an error\n        });\n    \nThis code executes a request on a background thread using `Task` and `await`:\n    \n    OkHttpClient client = ...;\n    Request request = ...;\n    \n    // Asynchronous call using Task\n    Response response = await client.NewCall(request).ExecuteAsync();\n    string body = response.Body().String();\n","Version":"3.2.0.0","Summary":"An HTTP+HTTP/2 client for Android and Java applications.","QuickStart":"# Getting Started with OkHttp\n\n\u003e An HTTP+HTTP/2 client for Android and Java applications\n\nHTTP is the way modern applications network. It’s how we exchange data \u0026amp;\nmedia. Doing HTTP efficiently makes your stuff load faster and saves\nbandwidth.\n\nOkHttp is an HTTP client that’s efficient by default:\n\n  * HTTP/2 support allows all requests to the same host to share a socket.\n  * Connection pooling reduces request latency (if HTTP/2 isn’t available).\n  * Transparent GZIP shrinks download sizes.\n  * Response caching avoids the network completely for repeat requests.\n\nOkHttp perseveres when the network is troublesome: it will silently recover\nfrom common connection problems. If your service has multiple IP addresses\nOkHttp will attempt alternate addresses if the first connect fails. This is\nnecessary for IPv4+IPv6 and for services hosted in redundant data centers.\nOkHttp initiates new connections with modern TLS features (SNI, ALPN), and\nfalls back to TLS 1.0 if the handshake fails.\n\nUsing OkHttp is easy. Its 3.0 API is designed with fluent builders and\nimmutability. It supports synchronous blocking calls, async calls with\ncallbacks and async calls using `Task` with `await`.\n\n## Get a URL\n\nThis code downloads a URL and print its contents as a string:\n\n    // Create a request\n    OkHttpClient client = new OkHttpClient();\n    Request request = new Request.Builder()\n        .Url(url)\n        .Build();\n    \n    // Synchronous blocking call\n    Response response = client.NewCall(request).Execute();\n    string body = response.Body().String();\n\n## Post to a Server\n\nThis code posts data to a service:\n\n    // Create a request\n    OkHttpClient client = new OkHttpClient();\n    RequestBody body = RequestBody.Create(\n        MediaType.parse(\"application/json; charset=utf-8\"), \n        \"{ \u0027name\u0027: \u0027Xamarin\u0027, \u0027rating\u0027: 5 }\");\n    Request request = new Request.Builder()\n        .Url(url)\n        .Post(body)\n        .Build();\n        \n    // Synchronous blocking call\n    Response response = client.NewCall(request).Execute();\n    string body = response.Body().String();\n\n## Asynchronous Requests\n\nThis code executes a request on a background thread using a callback mechanism:\n\n    OkHttpClient client = ...;\n    Request request = ...;\n    \n    // Asynchronous callback\n    client.NewCall(request).Enqueue(\n        (call, response) =\u003e {\n            // Response came back\n            string body = response.Body().String();\n        }, (call, exception) =\u003e {\n            // There was an error\n        });\n    \nThis code executes a request on a background thread using `Task` and `await`:\n    \n    OkHttpClient client = ...;\n    Request request = ...;\n    \n    // Asynchronous call using Task\n    Response response = await client.NewCall(request).ExecuteAsync();\n    string body = response.Body().String();\n","Hash":"5c57a5b1e3318b76a000d44f1f98ec3f","TargetPlatforms":["android"],"TrialHash":null}